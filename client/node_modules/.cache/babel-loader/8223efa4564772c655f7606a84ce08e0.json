{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\nexport const MESSAGE_TYPES = {\n  ADD_USER: \"ADD_USER\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\n  GET_MESSAGES: \"GET_MESSAGES\"\n};\nexport const addUser = ({\n  user,\n  message\n}) => async dispatch => {\n  if (message.users.every(item => item._id !== user._id)) {\n    dispatch({\n      type: MESSAGE_TYPES.ADD_USER,\n      payload: { ...user,\n        text: '',\n        media: []\n      }\n    });\n  }\n};\nexport const addMessage = ({\n  msg,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: MESSAGE_TYPES.ADD_MESSAGE,\n    payload: msg\n  });\n  socket.emit('addMessage', msg);\n\n  try {\n    await postDataAPI('message', msg, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getConversations = ({\n  auth,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\n    let newArr = [];\n    res.data.conversations.forEach(item => {\n      item.recipients.forEach(cv => {\n        if (cv._id !== auth.user._id) {\n          newArr.push({ ...cv,\n            text: item.text,\n            media: item.media\n          });\n        }\n      });\n    });\n    dispatch({\n      type: MESSAGE_TYPES.GET_CONVERSATIONS,\n      payload: {\n        newArr,\n        result: res.data.result\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getMessages = ({\n  auth,\n  id,\n  page = 1\n}) => async dispatch => {\n  try {\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\n    dispatch({\n      type: MESSAGE_TYPES.GET_MESSAGES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/locdinh/Desktop/2808-Assignment-Source/mern-social-media/client/src/redux/actions/messageAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","MESSAGE_TYPES","ADD_USER","ADD_MESSAGE","GET_CONVERSATIONS","GET_MESSAGES","addUser","user","message","dispatch","users","every","item","_id","type","payload","text","media","addMessage","msg","auth","socket","emit","token","err","ALERT","error","response","data","getConversations","page","res","newArr","conversations","forEach","recipients","cv","push","result","getMessages","id"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,uBAAxC;AAGA,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,UADiB;AAE3BC,EAAAA,WAAW,EAAE,aAFc;AAG3BC,EAAAA,iBAAiB,EAAE,mBAHQ;AAI3BC,EAAAA,YAAY,EAAE;AAJa,CAAtB;AAOP,OAAO,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAuB,MAAOC,QAAP,IAAoB;AAC9D,MAAGD,OAAO,CAACE,KAAR,CAAcC,KAAd,CAAoBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaN,IAAI,CAACM,GAA9C,CAAH,EAAsD;AAClDJ,IAAAA,QAAQ,CAAC;AAACK,MAAAA,IAAI,EAAEb,aAAa,CAACC,QAArB;AAA+Ba,MAAAA,OAAO,EAAE,EAAC,GAAGR,IAAJ;AAAUS,QAAAA,IAAI,EAAE,EAAhB;AAAoBC,QAAAA,KAAK,EAAE;AAA3B;AAAxC,KAAD,CAAR;AACH;AACJ,CAJM;AAMP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA2B,MAAOZ,QAAP,IAAoB;AAEvEA,EAAAA,QAAQ,CAAC;AAACK,IAAAA,IAAI,EAAEb,aAAa,CAACE,WAArB;AAAkCY,IAAAA,OAAO,EAAEI;AAA3C,GAAD,CAAR;AACAE,EAAAA,MAAM,CAACC,IAAP,CAAY,YAAZ,EAA0BH,GAA1B;;AAEA,MAAI;AACF,UAAMpB,WAAW,CAAC,SAAD,EAAYoB,GAAZ,EAAiBC,IAAI,CAACG,KAAtB,CAAjB;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZf,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEhB,WAAW,CAAC2B,KAApB;AAA2BV,MAAAA,OAAO,EAAE;AAACW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBT;AAA1B;AAApC,KAAD,CAAR;AACD;AACF,CAVM;AAYP,OAAO,MAAMU,gBAAgB,GAAG,CAAC;AAACT,EAAAA,IAAD;AAAOU,EAAAA,IAAI,GAAG;AAAd,CAAD,KAAuB,MAAOrB,QAAP,IAAoB;AAC3E,MAAI;AACA,UAAMsB,GAAG,GAAG,MAAM/B,UAAU,CAAE,uBAAsB8B,IAAI,GAAG,CAAE,EAAjC,EAAoCV,IAAI,CAACG,KAAzC,CAA5B;AACA,QAAIS,MAAM,GAAG,EAAb;AACAD,IAAAA,GAAG,CAACH,IAAJ,CAASK,aAAT,CAAuBC,OAAvB,CAA+BtB,IAAI,IAAI;AACrCA,MAAAA,IAAI,CAACuB,UAAL,CAAgBD,OAAhB,CAAwBE,EAAE,IAAI;AAC5B,YAAGA,EAAE,CAACvB,GAAH,KAAWO,IAAI,CAACb,IAAL,CAAUM,GAAxB,EAA4B;AAC1BmB,UAAAA,MAAM,CAACK,IAAP,CAAY,EAAC,GAAGD,EAAJ;AAAQpB,YAAAA,IAAI,EAAEJ,IAAI,CAACI,IAAnB;AAAyBC,YAAAA,KAAK,EAAEL,IAAI,CAACK;AAArC,WAAZ;AACD;AACF,OAJD;AAKD,KAND;AAQAR,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb,aAAa,CAACG,iBAAtB;AAAyCW,MAAAA,OAAO,EAAE;AAACiB,QAAAA,MAAD;AAASM,QAAAA,MAAM,EAAEP,GAAG,CAACH,IAAJ,CAASU;AAA1B;AAAlD,KAAD,CAAR;AACD,GAZH,CAYI,OAAOd,GAAP,EAAY;AACZf,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEhB,WAAW,CAAC2B,KAApB;AAA2BV,MAAAA,OAAO,EAAE;AAACW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBT;AAA1B;AAApC,KAAD,CAAR;AACD;AAEF,CAjBM;AAqBP,OAAO,MAAMoB,WAAW,GAAG,CAAC;AAAEnB,EAAAA,IAAF;AAAQoB,EAAAA,EAAR;AAAYV,EAAAA,IAAI,GAAG;AAAnB,CAAD,KAA4B,MAAOrB,QAAP,IAAoB;AACzE,MAAI;AACF,UAAMsB,GAAG,GAAG,MAAM/B,UAAU,CAAE,WAAUwC,EAAG,UAASV,IAAI,GAAG,CAAE,EAAjC,EAAoCV,IAAI,CAACG,KAAzC,CAA5B;AAEAd,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb,aAAa,CAACI,YAAtB;AAAoCU,MAAAA,OAAO,EAAEgB,GAAG,CAACH;AAAjD,KAAD,CAAR;AACD,GAJD,CAIE,OAAOJ,GAAP,EAAY;AACZf,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEhB,WAAW,CAAC2B,KADX;AAEPV,MAAAA,OAAO,EAAE;AAAEW,QAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBT;AAA3B;AAFF,KAAD,CAAR;AAID;AACF,CAXM","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport { postDataAPI, getDataAPI } from \"../../utils/fetchData\";\r\n\r\n\r\nexport const MESSAGE_TYPES = {\r\n  ADD_USER: \"ADD_USER\",\r\n  ADD_MESSAGE: \"ADD_MESSAGE\",\r\n  GET_CONVERSATIONS: \"GET_CONVERSATIONS\",\r\n  GET_MESSAGES: \"GET_MESSAGES\",\r\n};\r\n\r\nexport const addUser = ({ user, message }) => async (dispatch) => {\r\n    if(message.users.every(item => item._id !== user._id)){\r\n        dispatch({type: MESSAGE_TYPES.ADD_USER, payload: {...user, text: '', media: []} });\r\n    }\r\n};\r\n\r\nexport const addMessage = ({ msg, auth, socket }) => async (dispatch) => {\r\n\r\n  dispatch({type: MESSAGE_TYPES.ADD_MESSAGE, payload: msg});\r\n  socket.emit('addMessage', msg);\r\n\r\n  try {\r\n    await postDataAPI('message', msg, auth.token)\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n}\r\n\r\nexport const getConversations = ({auth, page = 1 }) => async (dispatch) => {\r\ntry {\r\n    const res = await getDataAPI(`conversations?limit=${page * 9}`, auth.token);\r\n    let newArr = [];\r\n    res.data.conversations.forEach(item => {\r\n      item.recipients.forEach(cv => {\r\n        if(cv._id !== auth.user._id){\r\n          newArr.push({...cv, text: item.text, media: item.media});\r\n        }\r\n      })\r\n    });\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_CONVERSATIONS, payload: {newArr, result: res.data.result} });\r\n  } catch (err) {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg } });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport const getMessages = ({ auth, id, page = 1 }) => async (dispatch) => {\r\n  try {\r\n    const res = await getDataAPI(`message/${id}?limit=${page * 9}`, auth.token);\r\n\r\n    dispatch({ type: MESSAGE_TYPES.GET_MESSAGES, payload: res.data });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: err.response.data.msg },\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}