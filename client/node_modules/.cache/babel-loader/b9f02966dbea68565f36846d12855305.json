{"ast":null,"code":"import { postDataAPI } from \"../../utils/fetchData\";\nimport { GLOBALTYPES } from \"./globalTypes\";\nimport valid from \"../../utils/valid\";\nexport const TYPES = {\n  AUTH: \"AUTH\"\n};\nexport const login = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"login\", data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const changePassword = ({\n  oldPassword,\n  newPassword,\n  cnfNewPassword,\n  auth\n}) => async dispatch => {\n  if (!oldPassword || oldPassword.length === 0) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please enter your old  password.\"\n      }\n    });\n  }\n\n  if (!newPassword || newPassword.length === 0) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please enter your new  password.\"\n      }\n    });\n  }\n\n  if (!cnfNewPassword || cnfNewPassword.length === 0) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please confirm your new  password.\"\n      }\n    });\n  }\n\n  if (newPassword !== cnfNewPassword) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Your password does not match\"\n      }\n    });\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI('changePassword', {\n      oldPassword,\n      newPassword\n    }, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const adminLogin = data => async dispatch => {\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"admin_login\", data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const refreshToken = () => async dispatch => {\n  const firstLogin = localStorage.getItem(\"firstLogin\");\n\n  if (firstLogin) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    try {\n      const res = await postDataAPI(\"refresh_token\");\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: {\n          token: res.data.access_token,\n          user: res.data.user\n        }\n      });\n      dispatch({\n        type: GLOBALTYPES.USER_TYPE,\n        payload: res.data.user.role\n      });\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {}\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const register = data => async dispatch => {\n  const check = valid(data);\n\n  if (check.errLength > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: check.errMsg\n    });\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"register\", data);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        token: res.data.access_token,\n        user: res.data.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role\n    });\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const registerAdmin = data => async dispatch => {\n  const check = valid(data);\n\n  if (check.errLength > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: check.errMsg\n    });\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n    const res = await postDataAPI(\"register_admin\", data);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    localStorage.removeItem(\"firstLogin\");\n    await postDataAPI(\"logout\");\n    window.location.href = \"/\";\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/locdinh/Desktop/2808-Assignment-Source/mern-social-media/client/src/redux/actions/authAction.js"],"names":["postDataAPI","GLOBALTYPES","valid","TYPES","AUTH","login","data","dispatch","type","ALERT","payload","loading","res","token","access_token","user","USER_TYPE","role","localStorage","setItem","success","msg","err","error","response","changePassword","oldPassword","newPassword","cnfNewPassword","auth","length","adminLogin","refreshToken","firstLogin","getItem","register","check","errLength","errMsg","registerAdmin","logout","removeItem","window","location","href"],"mappings":"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","sourcesContent":["import { postDataAPI } from \"../../utils/fetchData\";\nimport { GLOBALTYPES } from \"./globalTypes\";\nimport valid from \"../../utils/valid\";\n\nexport const TYPES = {\n  AUTH: \"AUTH\",\n};\n\nexport const login = (data) => async (dispatch) => {\n  try {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n    const res = await postDataAPI(\"login\", data);\n\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { token: res.data.access_token, user: res.data.user },\n    });\n\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role,\n    });\n\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\nexport const changePassword = ({oldPassword, newPassword, cnfNewPassword, auth}) => async (dispatch) => {\n\n  if(!oldPassword || oldPassword.length === 0){\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"Please enter your old  password.\" },\n    });\n  }\n  if(!newPassword || newPassword.length === 0){\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"Please enter your new  password.\" },\n    });\n  }\n  if(!cnfNewPassword || cnfNewPassword.length === 0){\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"Please confirm your new  password.\" },\n    });\n  }\n  if(newPassword !==cnfNewPassword){\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"Your password does not match\" },\n    });\n  }\n  \n  try {\n    \n    \n\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: true} });\n\n    const res = await postDataAPI('changePassword', {oldPassword, newPassword}, auth.token );\n\n    dispatch({ type: GLOBALTYPES.ALERT, payload: {loading: false} });\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\nexport const adminLogin = (data) => async (dispatch) => {\n  try {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n    const res = await postDataAPI(\"admin_login\", data);\n\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { token: res.data.access_token, user: res.data.user },\n    });\n\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role,\n    });\n\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\nexport const refreshToken = () => async (dispatch) => {\n  const firstLogin = localStorage.getItem(\"firstLogin\");\n  if (firstLogin) {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n    try {\n      const res = await postDataAPI(\"refresh_token\");\n      dispatch({\n        type: GLOBALTYPES.AUTH,\n        payload: { token: res.data.access_token, user: res.data.user },\n      });\n\n      dispatch({\n        type: GLOBALTYPES.USER_TYPE,\n        payload: res.data.user.role,\n      });\n\n      dispatch({ type: GLOBALTYPES.ALERT, payload: {} });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: { error: err.response.data.msg },\n      });\n    }\n  }\n};\n\nexport const register = (data) => async (dispatch) => {\n  const check = valid(data);\n  if (check.errLength > 0) {\n    return dispatch({ type: GLOBALTYPES.ALERT, payload: check.errMsg });\n  }\n\n  try {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n    const res = await postDataAPI(\"register\", data);\n\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { token: res.data.access_token, user: res.data.user },\n    });\n\n    dispatch({\n      type: GLOBALTYPES.USER_TYPE,\n      payload: res.data.user.role,\n    });\n\n    localStorage.setItem(\"firstLogin\", true);\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\nexport const registerAdmin = (data) => async (dispatch) => {\n  const check = valid(data);\n  if (check.errLength > 0) {\n    return dispatch({ type: GLOBALTYPES.ALERT, payload: check.errMsg });\n  }\n\n  try {\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n    const res = await postDataAPI(\"register_admin\", data);\n\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\nexport const logout = () => async (dispatch) => {\n  try {\n    localStorage.removeItem(\"firstLogin\");\n\n    await postDataAPI(\"logout\");\n    window.location.href = \"/\";\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}