{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\"\n};\nexport const createPost = ({\n  content,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (images.length > 0) {\n      media = await imageUpload(images);\n    }\n\n    const res = await postDataAPI(\"posts\", {\n      content,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    }); // todo notification\n\n    const msg = {\n      id: res.data.newPost._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      image: media.length > 0 ? media[0].url : null\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    console.error(\"Error creating post:\", err); // Log the error for debugging\n\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        // error: err.response.data.msg\n        error: err.response && err.response.data ? err.response.data.msg : err.message\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI(\"posts\", token);\n    console.log(\"Fetched posts data:\", res.data);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 1\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        // error: err.response.data.msg\n        error: \"error\"\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n\n  if (status.content === content && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) {\n    return;\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token); // todo notification\n\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const reportPost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const reportExist = post.reports.find(report => report === auth.user._id);\n\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"You have already reported this post.\"\n      }\n    });\n  }\n\n  const newPost = { ...post\n  };\n  newPost.reports.push(auth.user._id);\n  dispatch({\n    type: POST_TYPES.REPORT_POST,\n    payload: newPost\n  });\n\n  try {\n    const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/locdinh/Desktop/2808-Assignment-Source/mern-social-media/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","imageUpload","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","REPORT_POST","SAVE_POST","createPost","content","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","console","error","response","message","getPosts","log","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","getPost","detailPost","every","deletePost","reportPost","reportExist","reports","find","report","push","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\nimport {\n  postDataAPI,\n  getDataAPI,\n  patchDataAPI,\n  deleteDataAPI,\n} from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\n\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\",\n};\n\nexport const createPost =\n  ({ content, images, auth, socket }) =>\n  async (dispatch) => {\n    let media = [];\n\n    try {\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n\n      if (images.length > 0) {\n        media = await imageUpload(images);\n      }\n\n      const res = await postDataAPI(\n        \"posts\",\n        { content, images: media },\n        auth.token\n      );\n\n      dispatch({\n        type: POST_TYPES.CREATE_POST,\n        payload: { ...res.data.newPost, user: auth.user },\n      });\n\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\n\n      // todo notification\n      const msg = {\n        id: res.data.newPost._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${res.data.newPost._id}`,\n        content,\n        image: media.length > 0 ? media[0].url : null,\n      };\n\n      dispatch(createNotify({ msg, auth, socket }));\n    } catch (err) {\n      console.error(\"Error creating post:\", err); // Log the error for debugging\n\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          // error: err.response.data.msg\n          error:\n            err.response && err.response.data\n              ? err.response.data.msg\n              : err.message,\n        },\n      });\n    }\n  };\n\nexport const getPosts = (token) => async (dispatch) => {\n  try {\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\n    const res = await getDataAPI(\"posts\", token);\n    console.log(\"Fetched posts data:\", res.data);\n\n    dispatch({ type: POST_TYPES.GET_POSTS, payload: { ...res.data, page: 1 } });\n\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        // error: err.response.data.msg\n        error: \"error\",\n      },\n    });\n  }\n};\n\nexport const updatePost =\n  ({ content, images, auth, status }) =>\n  async (dispatch) => {\n    let media = [];\n    const imgNewUrl = images.filter((img) => !img.url);\n    const imgOldUrl = images.filter((img) => img.url);\n    if (\n      status.content === content &&\n      imgNewUrl.length === 0 &&\n      imgOldUrl.length === status.images.length\n    ) {\n      return;\n    }\n    try {\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\n      if (imgNewUrl.length > 0) {\n        media = await imageUpload(imgNewUrl);\n      }\n      const res = await patchDataAPI(\n        `post/${status._id}`,\n        { content, images: [...imgOldUrl, ...media] },\n        auth.token\n      );\n\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n\nexport const likePost =\n  ({ post, auth, socket }) =>\n  async (dispatch) => {\n    const newPost = { ...post, likes: [...post.likes, auth.user] };\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    socket.emit(\"likePost\", newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/like`, null, auth.token);\n\n      // todo notification\n      const msg = {\n        id: auth.user._id,\n        text: \"Liked your post.\",\n        recipients: [post.user._id],\n        url: `/post/${post._id}`,\n        content: post.content,\n        image: post.images[0].url,\n      };\n\n      dispatch(createNotify({ msg, auth, socket }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n\nexport const unLikePost =\n  ({ post, auth, socket }) =>\n  async (dispatch) => {\n    const newPost = {\n      ...post,\n      likes: post.likes.filter((like) => like._id !== auth.user._id),\n    };\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    socket.emit(\"unLikePost\", newPost);\n\n    try {\n      await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\n\n      // todo notification\n      const msg = {\n        id: auth.user._id,\n        text: \"Liked your post.\",\n        recipients: [post.user._id],\n        url: `/post/${post._id}`,\n      };\n\n      dispatch(removeNotify({ msg, auth, socket }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n\nexport const getPost =\n  ({ detailPost, id, auth }) =>\n  async (dispatch) => {\n    if (detailPost.every((post) => post._id !== id)) {\n      try {\n        const res = await getDataAPI(`post/${id}`, auth.token);\n        dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post });\n      } catch (err) {\n        dispatch({\n          type: GLOBALTYPES.ALERT,\n          payload: {\n            error: err.response.data.msg,\n          },\n        });\n      }\n    }\n  };\n\nexport const deletePost =\n  ({ post, auth, socket }) =>\n  async (dispatch) => {\n    dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\n\n    try {\n      const res = await deleteDataAPI(`post/${post._id}`, auth.token);\n\n      // todo notification\n      const msg = {\n        id: post._id,\n        text: \"Added a new post.\",\n        recipients: res.data.newPost.user.followers,\n        url: `/post/${post._id}`,\n      };\n\n      dispatch(removeNotify({ msg, auth, socket }));\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n\nexport const reportPost =\n  ({ post, auth }) =>\n  async (dispatch) => {\n    const reportExist = post.reports.find((report) => report === auth.user._id);\n\n    if (reportExist && reportExist.length > 0) {\n      return dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: { error: \"You have already reported this post.\" },\n      });\n    }\n    const newPost = { ...post };\n    newPost.reports.push(auth.user._id);\n\n    dispatch({ type: POST_TYPES.REPORT_POST, payload: newPost });\n\n    try {\n      const res = await patchDataAPI(\n        `post/${post._id}/report`,\n        null,\n        auth.token\n      );\n      dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n\nexport const savePost =\n  ({ post, auth }) =>\n  async (dispatch) => {\n    const newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\n\n    dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\n\n    try {\n      await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n\nexport const unSavePost =\n  ({ post, auth }) =>\n  async (dispatch) => {\n    const newUser = {\n      ...auth.user,\n      saved: auth.user.saved.filter((id) => id !== post._id),\n    };\n\n    dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\n\n    try {\n      await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg,\n        },\n      });\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}