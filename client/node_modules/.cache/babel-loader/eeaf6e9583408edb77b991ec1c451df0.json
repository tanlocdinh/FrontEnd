{"ast":null,"code":"import { GLOBALTYPES, DeleteData } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const PROFILE_TYPES = {\n  LOADING: \"LOADING_PROFILE\",\n  GET_USER: \"GET_PROFILE_USER\",\n  FOLLOW: \"FOLLOW\",\n  UNFOLLOW: \"UNFOLLOW\",\n  GET_ID: \"GET_PROFILE_ID\",\n  GET_POSTS: \"GET_PROFILE_POSTS\",\n  UPDATE_POST: \"UPDATE_PROFILE_POSTS\"\n};\nexport const getProfileUsers = ({\n  id,\n  auth\n}) => async dispatch => {\n  dispatch({\n    type: PROFILE_TYPES.GET_ID,\n    payload: id\n  });\n\n  try {\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: true\n    });\n    const res = getDataAPI(`/user/${id}`, auth.token);\n    const res1 = getDataAPI(`/user_posts/${id}`, auth.token);\n    const users = await res;\n    const posts = await res1;\n    dispatch({\n      type: PROFILE_TYPES.GET_USER,\n      payload: users.data\n    });\n    dispatch({\n      type: PROFILE_TYPES.GET_POSTS,\n      payload: { ...posts.data,\n        _id: id,\n        page: 2\n      }\n    });\n    dispatch({\n      type: PROFILE_TYPES.LOADING,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateProfileUser = ({\n  userData,\n  avatar,\n  auth\n}) => async dispatch => {\n  if (!userData.fullname) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Please enter full name.\"\n      }\n    });\n  }\n\n  if (userData.fullname.length > 25) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Full name is too long.\"\n      }\n    });\n  }\n\n  if (userData.story.length > 200) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"Story is too long.\"\n      }\n    });\n  }\n\n  try {\n    let media;\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (avatar) {\n      media = await imageUpload([avatar]);\n    }\n\n    const res = await patchDataAPI(\"user\", { ...userData,\n      avatar: avatar ? media[0].url : auth.user.avatar\n    }, auth.token);\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: { ...auth,\n        user: { ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar\n        }\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const follow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: [...user.followers, auth.user]\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: [...item.followers, auth.user]\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.FOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: [...auth.user.following, newUser]\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`/user/${user._id}/follow`, null, auth.token); // todo socket\n\n    socket.emit(\"follow\", res.data.newUser); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: 'started following you',\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unfollow = ({\n  users,\n  user,\n  auth,\n  socket\n}) => async dispatch => {\n  let newUser;\n\n  if (users.every(item => item._id !== user._id)) {\n    newUser = { ...user,\n      followers: DeleteData(user.followers, auth.user._id)\n    };\n  } else {\n    users.forEach(item => {\n      if (item._id === user._id) {\n        newUser = { ...item,\n          followers: DeleteData(item.followers, auth.user._id)\n        };\n      }\n    });\n  }\n\n  dispatch({\n    type: PROFILE_TYPES.UNFOLLOW,\n    payload: newUser\n  });\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: { ...auth.user,\n        following: DeleteData(auth.user.following, newUser._id)\n      }\n    }\n  });\n\n  try {\n    const res = await patchDataAPI(`/user/${user._id}/unfollow`, null, auth.token); // todo socket\n\n    socket.emit(\"unFollow\", res.data.newUser); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"started following you\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/locdinh/Desktop/2808-Assignment-Source/mern-social-media/client/src/redux/actions/profileAction.js"],"names":["GLOBALTYPES","DeleteData","getDataAPI","patchDataAPI","imageUpload","createNotify","removeNotify","PROFILE_TYPES","LOADING","GET_USER","FOLLOW","UNFOLLOW","GET_ID","GET_POSTS","UPDATE_POST","getProfileUsers","id","auth","dispatch","type","payload","res","token","res1","users","posts","data","_id","page","err","ALERT","error","response","msg","updateProfileUser","userData","avatar","fullname","length","story","media","loading","url","user","AUTH","success","follow","socket","newUser","every","item","followers","forEach","following","emit","text","recipients","unfollow"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, DeleteData } from \"./globalTypes\";\nimport { getDataAPI, patchDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\n\nexport const PROFILE_TYPES = {\n  LOADING: \"LOADING_PROFILE\",\n  GET_USER: \"GET_PROFILE_USER\",\n  FOLLOW: \"FOLLOW\",\n  UNFOLLOW: \"UNFOLLOW\",\n  GET_ID: \"GET_PROFILE_ID\",\n  GET_POSTS: \"GET_PROFILE_POSTS\",\n  UPDATE_POST: \"UPDATE_PROFILE_POSTS\",\n\n};\n\n\nexport const getProfileUsers = ({ id, auth}) => async (dispatch) => {\n\n  dispatch({type:PROFILE_TYPES.GET_ID, payload: id})\n\n    try {\n      dispatch({type: PROFILE_TYPES.LOADING, payload:true});\n      const res =  getDataAPI(`/user/${id}`, auth.token);\n      \n      const res1 =  getDataAPI(`/user_posts/${id}`, auth.token);\n\n      const users = await res;\n      const posts = await res1;\n\n      dispatch({ type: PROFILE_TYPES.GET_USER, payload: users.data });\n      dispatch({ type: PROFILE_TYPES.GET_POSTS, payload: {...posts.data, _id: id, page: 2} });\n\n      dispatch({ type: PROFILE_TYPES.LOADING, payload: false });\n      \n    } catch (err) {\n      dispatch({ type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg} });\n    }\n  }\n\n\n\nexport const updateProfileUser = ({userData, avatar, auth}) => async (dispatch) => {\n  if(!userData.fullname){\n    return dispatch({type: GLOBALTYPES.ALERT, payload: {error: \"Please enter full name.\"}})\n  }\n\n  if (userData.fullname.length > 25) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"Full name is too long.\" },\n    });\n  }\n\n  if (userData.story.length > 200) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: \"Story is too long.\" },\n    });\n  }\n\n  try {\n    let media;\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { loading: true }\n    });\n\n    if(avatar){\n      media = await imageUpload([avatar]);\n    }\n\n    const res = await patchDataAPI(\"user\", { ...userData, avatar: avatar ? media[0].url : auth.user.avatar }, auth.token);\n\n    dispatch({\n      type: GLOBALTYPES.AUTH,\n      payload: {\n        ...auth,\n        user: {\n          ...auth.user,\n          ...userData,\n          avatar: avatar ? media[0].url : auth.user.avatar,\n        },\n      },\n    });\n   \n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { success: res.data.msg },\n    });\n\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n\n};\n\nexport const follow = ({ users, user, auth, socket }) => async (dispatch) => {\n  let newUser;\n  if(users.every(item => item._id !== user._id )){\n    newUser = { ...user, followers: [...user.followers, auth.user] };\n  }else{\n    users.forEach(item => {\n      if(item._id === user._id){\n        newUser = { ...item, followers: [...item.followers, auth.user] };\n      }\n    })\n  }\n   \n  \n  dispatch({ type: PROFILE_TYPES.FOLLOW, payload: newUser });\n\n  dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user:{...auth.user, following: [...auth.user.following, newUser] } } });\n\n  \n\n  try {\n    const res = await patchDataAPI(\n      `/user/${user._id}/follow`,\n      null,\n      auth.token\n    );\n    // todo socket\n    socket.emit(\"follow\", res.data.newUser);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: 'started following you',\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`,\n    };\n\n    dispatch(createNotify({ msg, auth, socket }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\nexport const unfollow = ({ users, user, auth, socket }) => async (dispatch) => {\n\n    let newUser;\n    if (users.every((item) => item._id !== user._id)) {\n      newUser = {\n        ...user,\n        followers: DeleteData(user.followers, auth.user._id),\n      };\n    } else {\n      users.forEach((item) => {\n        if (item._id === user._id) {\n          newUser = {\n            ...item,\n            followers: DeleteData(item.followers, auth.user._id),\n          };\n        }\n      });\n    }\n  \n  dispatch({ type: PROFILE_TYPES.UNFOLLOW, payload: newUser });\n\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: {\n      ...auth,\n      user: {\n        ...auth.user,\n        following: DeleteData(auth.user.following, newUser._id)\n      },\n    },\n  });\n\n  \n\n  try {\n    const res = await patchDataAPI(\n      `/user/${user._id}/unfollow`,\n      null,\n      auth.token\n    );\n\n    // todo socket\n    socket.emit(\"unFollow\", res.data.newUser);\n\n    // todo notification\n    const msg = {\n      id: auth.user._id,\n      text: \"started following you\",\n      recipients: [newUser._id],\n      url: `/profile/${auth.user._id}`,\n    };\n\n    dispatch(removeNotify({ msg, auth, socket }));\n    \n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}