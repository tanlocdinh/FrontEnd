{"ast":null,"code":"export const checkImage = file => {\n  let err = \"\";\n\n  if (!file) {\n    return err = \"File does not exist.\";\n  } //?1 mb\n\n\n  if (file.size > 1024 * 1024) {\n    return err = \"File size must be less than 1 Mb.\";\n  }\n\n  if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\n    return err = \"Image must be jpeg or png.\";\n  }\n\n  return err;\n}; // export const imageUpload = async (images) => {\n//   let imgArr = [];\n//   for (const item of images) {\n//     const formData = new FormData();\n//     if (item.camera) {\n//       formData.append(\"file\", item.camera);\n//     } else {\n//       formData.append(\"file\", item);\n//     }\n//     // formData.append(\"upload_preset\", \"ADD VALUE HERE\");\n//     // formData.append(\"cloud_name\", \"ADD VALUE HERE\");\n//     const res = await fetch(\"http://localhost:8080/upload\", {\n//       method: \"POST\",\n//       body: formData,\n//     });\n//     if (!res.ok) {\n//       throw new Error(\"Failed to upload image\");\n//     }\n//     const data = await res.json();\n//     console.log(\"Uploaded image data:\", data);\n//     imgArr.push({ public_id: data.public_id, url: data.secure_url });\n//   }\n//   return imgArr;\n// };\n\nexport const imageUpload = async images => {\n  let imgArr = [];\n\n  for (const item of images) {\n    const formData = new FormData();\n\n    if (item.camera) {\n      formData.append(\"file\", item.camera);\n    } else {\n      formData.append(\"file\", item);\n    }\n\n    try {\n      const res = await fetch(\"http://localhost:8080/upload\", {\n        method: \"POST\",\n        body: formData\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to upload image\");\n      }\n\n      const data = await res.json();\n      console.log(\"Uploaded image data:\", data); // Use the filePath as the URL for the image\n\n      if (data && data.filePath) {\n        imgArr.push({\n          url: data.filePath\n        });\n      } else {\n        console.error(\"Invalid image upload response:\", data);\n        throw new Error(\"Invalid image upload response\");\n      }\n    } catch (error) {\n      console.error(\"Image upload error:\", error);\n      throw error;\n    }\n  }\n\n  return imgArr;\n};","map":{"version":3,"sources":["/Users/locdinh/Desktop/2808-Assignment-Source/mern-social-media/client/src/utils/imageUpload.js"],"names":["checkImage","file","err","size","type","imageUpload","images","imgArr","item","formData","FormData","camera","append","res","fetch","method","body","ok","Error","data","json","console","log","filePath","push","url","error"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAIC,IAAD,IAAU;AAClC,MAAIC,GAAG,GAAG,EAAV;;AACA,MAAI,CAACD,IAAL,EAAW;AACT,WAAQC,GAAG,GAAG,sBAAd;AACD,GAJiC,CAKlC;;;AACA,MAAID,IAAI,CAACE,IAAL,GAAY,OAAO,IAAvB,EAA6B;AAC3B,WAAQD,GAAG,GAAG,mCAAd;AACD;;AAED,MAAID,IAAI,CAACG,IAAL,KAAc,YAAd,IAA8BH,IAAI,CAACG,IAAL,KAAc,WAAhD,EAA6D;AAC3D,WAAQF,GAAG,GAAG,4BAAd;AACD;;AAED,SAAOA,GAAP;AACD,CAfM,C,CAiBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMG,WAAW,GAAG,MAAOC,MAAP,IAAkB;AAC3C,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,MAAMC,IAAX,IAAmBF,MAAnB,EAA2B;AACzB,UAAMG,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AAEA,QAAIF,IAAI,CAACG,MAAT,EAAiB;AACfF,MAAAA,QAAQ,CAACG,MAAT,CAAgB,MAAhB,EAAwBJ,IAAI,CAACG,MAA7B;AACD,KAFD,MAEO;AACLF,MAAAA,QAAQ,CAACG,MAAT,CAAgB,MAAhB,EAAwBJ,IAAxB;AACD;;AAED,QAAI;AACF,YAAMK,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAAD,EAAiC;AACtDC,QAAAA,MAAM,EAAE,MAD8C;AAEtDC,QAAAA,IAAI,EAAEP;AAFgD,OAAjC,CAAvB;;AAKA,UAAI,CAACI,GAAG,CAACI,EAAT,EAAa;AACX,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,IAApC,EAXE,CAaF;;AACA,UAAIA,IAAI,IAAIA,IAAI,CAACI,QAAjB,EAA2B;AACzBhB,QAAAA,MAAM,CAACiB,IAAP,CAAY;AAAEC,UAAAA,GAAG,EAAEN,IAAI,CAACI;AAAZ,SAAZ;AACD,OAFD,MAEO;AACLF,QAAAA,OAAO,CAACK,KAAR,CAAc,gCAAd,EAAgDP,IAAhD;AACA,cAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF,KApBD,CAoBE,OAAOQ,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACK,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACA,YAAMA,KAAN;AACD;AACF;;AACD,SAAOnB,MAAP;AACD,CArCM","sourcesContent":["export const checkImage = (file) => {\n  let err = \"\";\n  if (!file) {\n    return (err = \"File does not exist.\");\n  }\n  //?1 mb\n  if (file.size > 1024 * 1024) {\n    return (err = \"File size must be less than 1 Mb.\");\n  }\n\n  if (file.type !== \"image/jpeg\" && file.type !== \"image/png\") {\n    return (err = \"Image must be jpeg or png.\");\n  }\n\n  return err;\n};\n\n// export const imageUpload = async (images) => {\n//   let imgArr = [];\n//   for (const item of images) {\n//     const formData = new FormData();\n\n//     if (item.camera) {\n//       formData.append(\"file\", item.camera);\n//     } else {\n//       formData.append(\"file\", item);\n//     }\n\n//     // formData.append(\"upload_preset\", \"ADD VALUE HERE\");\n//     // formData.append(\"cloud_name\", \"ADD VALUE HERE\");\n\n//     const res = await fetch(\"http://localhost:8080/upload\", {\n//       method: \"POST\",\n//       body: formData,\n//     });\n\n//     if (!res.ok) {\n//       throw new Error(\"Failed to upload image\");\n//     }\n\n//     const data = await res.json();\n//     console.log(\"Uploaded image data:\", data);\n\n//     imgArr.push({ public_id: data.public_id, url: data.secure_url });\n//   }\n//   return imgArr;\n// };\n\nexport const imageUpload = async (images) => {\n  let imgArr = [];\n  for (const item of images) {\n    const formData = new FormData();\n\n    if (item.camera) {\n      formData.append(\"file\", item.camera);\n    } else {\n      formData.append(\"file\", item);\n    }\n\n    try {\n      const res = await fetch(\"http://localhost:8080/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to upload image\");\n      }\n\n      const data = await res.json();\n      console.log(\"Uploaded image data:\", data);\n\n      // Use the filePath as the URL for the image\n      if (data && data.filePath) {\n        imgArr.push({ url: data.filePath });\n      } else {\n        console.error(\"Invalid image upload response:\", data);\n        throw new Error(\"Invalid image upload response\");\n      }\n    } catch (error) {\n      console.error(\"Image upload error:\", error);\n      throw error;\n    }\n  }\n  return imgArr;\n};\n"]},"metadata":{},"sourceType":"module"}