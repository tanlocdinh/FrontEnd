{"ast":null,"code":"import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nexport const createComment = ({\n  post,\n  newComment,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    comments: [...post.comments, newComment]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    const data = { ...newComment,\n      postId: post._id,\n      postUserId: post.user._id\n    };\n    const res = await postDataAPI(\"comment\", data, auth.token);\n    const newData = { ...res.data.newComment,\n      user: auth.user\n    };\n    const newPost = { ...post,\n      comments: [...post.comments, newData]\n    };\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: newPost\n    }); // todo socket\n\n    socket.emit(\"createComment\", newPost); // todo notification\n\n    const msg = {\n      id: res.data.newComment._id,\n      text: newComment.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n      recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n      url: `/post/${post._id}`,\n      content: newComment.reply ? newComment.content : post.content,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updateComment = ({\n  comment,\n  post,\n  content,\n  auth\n}) => async dispatch => {\n  const newComments = EditData(post.comments, comment._id, { ...comment,\n    content\n  });\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}`, {\n      content\n    }, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = { ...comment,\n    likes: [...comment.likes, auth.user]\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikeComment = ({\n  comment,\n  post,\n  auth\n}) => async dispatch => {\n  const newComment = { ...comment,\n    likes: DeleteData(comment.likes, auth.user._id)\n  };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post,\n    comments: newComments\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const deleteComment = ({\n  post,\n  comment,\n  auth,\n  socket\n}) => async dispatch => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n  const newPost = { ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit('deleteComment', newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token); // todo notification\n\n      const msg = {\n        id: item._id,\n        text: item.reply ? \"mentioned you in a comment.\" : \"commented on your post.\",\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\n        url: `/post/${post._id}`\n      };\n      dispatch(removeNotify({\n        msg,\n        auth,\n        socket\n      }));\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/locdinh/Desktop/2808-Assignment-Source/mern-social-media/client/src/redux/actions/commentAction.js"],"names":["GLOBALTYPES","EditData","DeleteData","POST_TYPES","createNotify","removeNotify","postDataAPI","patchDataAPI","deleteDataAPI","createComment","post","newComment","auth","socket","dispatch","newPost","comments","type","UPDATE_POST","payload","data","postId","_id","postUserId","user","res","token","newData","emit","msg","id","text","reply","recipients","tag","url","content","image","images","err","ALERT","error","response","updateComment","comment","newComments","likeComment","likes","unLikeComment","deleteComment","deleteArr","filter","cm","find","da","forEach","item"],"mappings":"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","sourcesContent":["import { GLOBALTYPES, EditData, DeleteData } from \"./globalTypes\";\nimport { POST_TYPES } from \"./postAction\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nimport { postDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\n\n\n\n\nexport const createComment = ({post, newComment, auth, socket}) => async (dispatch) => {\n    const newPost = {...post, comments: [...post.comments, newComment]};\n    \n    dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n    try {\n      const data = {\n        ...newComment,\n        postId: post._id,\n        postUserId: post.user._id,\n      };\n      const res = await postDataAPI(\"comment\", data, auth.token);\n\n      const newData = { ...res.data.newComment, user: auth.user };\n      const newPost = { ...post, comments: [...post.comments, newData] };\n      dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n\n      // todo socket\n      socket.emit(\"createComment\", newPost);\n\n      // todo notification\n      const msg = {\n        id: res.data.newComment._id,\n        text: newComment.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: newComment.reply ? [newComment.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n        content: newComment.reply\n          ? newComment.content\n          : post.content,\n        image: post.images[0].url,\n      };\n\n      dispatch(createNotify({ msg, auth, socket }));\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n    }\n};\n\n\nexport const updateComment = ({comment, post, content, auth}) => async (dispatch) => {\n  const newComments = EditData(post.comments, comment._id, {...comment, content});\n  const newPost = {...post, comments: newComments};\n  \n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  try {\n    await patchDataAPI(`comment/${comment._id}`, { content }, auth.token);\n\n  } catch (err) {\n    dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n  }\n};\n\nexport const likeComment= ({comment, post, auth}) => async (dispatch) => {\n    const newComment = {...comment, likes: [...comment.likes, auth.user]};\n     const newComments = EditData(post.comments, comment._id, newComment);\n     const newPost = { ...post, comments: newComments };\n\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n    try {\n        await patchDataAPI(`comment/${comment._id}/like`, null, auth.token);\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}});\n\n    }\n};\n\nexport const unLikeComment = ({ comment, post, auth }) => async (dispatch) => {\n  const newComment = { ...comment, likes: DeleteData(comment.likes, auth.user._id) };\n  const newComments = EditData(post.comments, comment._id, newComment);\n  const newPost = { ...post, comments: newComments };\n\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\n  try {\n    await patchDataAPI(`comment/${comment._id}/unlike`, null, auth.token);\n\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};\n\n\nexport const deleteComment = ({ post, comment, auth, socket }) => async (dispatch) => {\n  const deleteArr = [...post.comments.filter(cm => cm.reply === comment._id), comment];\n\n  const newPost = {\n    ...post,\n    comments: post.comments.filter(cm => !deleteArr.find(da => cm._id === da._id))\n  }\n\n  dispatch({type: POST_TYPES.UPDATE_POST, payload: newPost});\n\n  socket.emit('deleteComment', newPost);\n\n  try {\n    deleteArr.forEach(item => {\n      deleteDataAPI(`comment/${item._id}`, auth.token);\n\n      // todo notification\n      const msg = {\n        id: item._id,\n        text: item.reply\n          ? \"mentioned you in a comment.\"\n          : \"commented on your post.\",\n        recipients: item.reply ? [item.tag._id] : [post.user._id],\n        url: `/post/${post._id}`,\n      };\n\n      dispatch(removeNotify({ msg, auth, socket }));\n    })\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: { error: err.response.data.msg },\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}